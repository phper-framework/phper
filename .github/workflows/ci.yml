# Copyright (c) 2022 PHPER Framework Team
# PHPER is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan
# PSL v2. You may obtain a copy of Mulan PSL v2 at:
#          http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.

name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches: [ "**" ]

env:
  RUST_LOG: debug
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "1"
  RUSTFLAGS: "-D warnings"
  LLVM_CONFIG_PATH: llvm-config-10

jobs:
  ci:
    name: CI
    strategy:
      fail-fast: false
      matrix:
        flag:
        - os: "ubuntu-20.04"
          php-version: "7.0.33"
        - os: "ubuntu-20.04"
          php-version: "7.1.33"
        - os: "ubuntu-20.04"
          php-version: "7.2.34"
        - os: "ubuntu-20.04"
          php-version: "7.3.33"
        - os: "ubuntu-20.04"
          php-version: "7.4.30"
        - os: "ubuntu-20.04"
          php-version: "8.0.22"

        # macos build php7.2- failed, so skipped.
        - os: "macos-11"
          php-version: "7.3.33"
        - os: "macos-11"
          php-version: "7.4.30"
        - os: "macos-11"
          php-version: "8.0.22"
        - os: "macos-11"
          php-version: "8.1.9"

    runs-on: ${{ matrix.flag.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1.5.4
        with:
          version: "10.0"

      - name: Install dependencies
        if: matrix.flag.os == 'ubuntu-20.04'
        run: sudo apt-get install -y libxml2-dev libxslt1-dev

      - name: Install XCode
        if: matrix.flag.os == 'macos-11'
        run: sudo xcode-select -s /Library/Developer/CommandLineTools

      - name: Configure caching for PHPBrew
        id: cache-phpbrew
        uses: actions/cache@v3
        with:
          key: ${{ matrix.flag.os }}-phpbrew-${{ matrix.flag.php-version }}
          path: |
            /usr/local/bin/phpbrew
            "~/.phpbrew"

      - name: Setup PHPBrew and PHP
        if: steps.cache-phpbrew.outputs.cache-hit != 'true'
        run: |
          curl -L -O https://github.com/phpbrew/phpbrew/releases/download/1.27.0/phpbrew.phar
          chmod +x phpbrew.phar
          sudo mv phpbrew.phar /usr/local/bin/phpbrew
          phpbrew init
          phpbrew install ${{ matrix.flag.php-version }} +fpm +json +pdo

      - name: Debug
        run: |
          echo $PATH
          ls -alh /usr/local/sbin

      # - name: Link PHP and get version
      #   run: |
      #     sudo rm -rf /usr/local/bin/php
      #     sudo ln -s ~/.phpbrew/php/php-8.1.9/bin/php /usr/local/bin/php
      #     sudo rm -rf /usr/local/sbin/php-fpm
      #     sudo ln -s ~/.phpbrew/php/php-8.1.9/sbin/php-fpm /usr/local/sbin/php-fpm
      #     php-config || true
      #     php-fpm --version

      # - name: Install Rust Nightly
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: nightly
      #     override: true
      #     components: rustfmt

      # - name: Install Rust Stable
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true
      #     components: clippy

      # - name: Generate Cargo Lockfile
      #   run: cargo generate-lockfile

      # - name: Configure caching for Cargo
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #     key: ${{ runner.os }}-cargo-${{ matrix.flag.php-version }}-${{ hashFiles('**/Cargo.lock') }}

      # - name: Cargo fmt
      #   uses: actions-rs/cargo@v1
      #   with:
      #     toolchain: nightly
      #     command: fmt
      #     args: --all -- --check

      # - name: Cargo build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     toolchain: stable
      #     command: build
      #     args: --release

      # - name: Cargo clippy
      #   uses: actions-rs/cargo@v1
      #   with:
      #     toolchain: stable
      #     command: clippy
      #     args: --release

      # - name: Cargo test
      #   uses: actions-rs/cargo@v1
      #   with:
      #     toolchain: stable
      #     command: test
      #     args: --release -- --nocapture

      # - name: Cargo doc
      #   uses: actions-rs/cargo@v1
      #   env:
      #     RUSTDOCFLAGS: "-D warnings --cfg docsrs"
      #   with:
      #     toolchain: nightly
      #     command: doc
      #     args: --workspace --no-deps --all-features

  # # Test every features for single crate.
  # check:
  #   name: Check
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-20.04
  #       php-version:
  #         - "7.4"
  #       features:
  #         - ""
  #         - "--all-features"

  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Install libclang
  #       run: sudo apt-get install -y llvm-10-dev libclang-10-dev

  #     - name: Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: ${{ matrix.php-version }}
  #         tools: php-config

  #     - name: Install Rust Stable
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true

  #     - name: Cargo check phper-sys
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper-sys/Cargo.toml ${{ matrix.features }}

  #     - name: Cargo check phper-build
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper-build/Cargo.toml ${{ matrix.features }}

  #     - name: Cargo check phper-macros
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper-macros/Cargo.toml ${{ matrix.features }}

  #     - name: Cargo check phper-alloc
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper-alloc/Cargo.toml ${{ matrix.features }}

  #     - name: Cargo check phper-test
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper-test/Cargo.toml ${{ matrix.features }}

  #     - name: Cargo check phper
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check
  #         args: --manifest-path phper/Cargo.toml ${{ matrix.features }}
